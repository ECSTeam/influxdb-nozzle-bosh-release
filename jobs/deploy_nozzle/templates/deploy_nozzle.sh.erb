#!/bin/bash

export PATH="/var/vcap/packages/cf_cli/bin:$PATH"
export CF=`which cf`

function cf() {
	echo cf "$@"
	output=$($CF "$@" 2>&1)
	result="$?"
	if [ "$result" -ne "0" ]; then
		echo "$output"
		exit $result
	fi
}

function is_true() {
	equals_ignore_case "$1" "true"
}

function equals_ignore_case() {
	echo "$1" | grep -i "^$2\$" >/dev/null
}

function import_opsmgr_variables() {
	export SCHEME=https
	export ADMIN_USER=<%= Shellwords.escape properties.cf.admin_user %>
	export ADMIN_PASSWORD=<%= Shellwords.escape properties.cf.admin_password %>
	export DOMAIN=<%= Shellwords.escape properties.domain %>
	export APP_DOMAIN=<%= Shellwords.escape properties.app_domains[0] %>
	export CF_ORG=<%= Shellwords.escape properties.org %>
	export CF_SPACE=<%= Shellwords.escape properties.space %>
	export CF_TARGET=$SCHEME://api.${DOMAIN}
	export CF_SKIP_SSL=<%= Shellwords.escape properties.ssl.skip_cert_verify %>
	export SECURITY_USER_NAME=<%= Shellwords.escape properties.security.user %>
	export SECURITY_USER_PASSWORD=<%= Shellwords.escape properties.security.password %>
	export INSTANCES=<%= Shellwords.escape properties.instances %>
	export BUILDPACK=<%= Shellwords.escape properties.buildpack %>

	export INFLUXDB_NOZZLE_ADMIN_CLIENT_ID=<%= Shellwords.escape properties.influxdb.nozzle.admin_client_id %>
	export INFLUXDB_NOZZLE_ADMIN_CLIENT_SECRET=<%= Shellwords.escape properties.influxdb.nozzle.admin_client_secret %>
	export INFLUXDB_NOZZLE_DB_NAME=<%= Shellwords.escape properties.influxdb.nozzle.db_name %>
	export INFLUXDB_NOZZLE_DB_USER=<%= Shellwords.escape properties.influxdb.nozzle.db_user %>
	export INFLUXDB_NOZZLE_DB_PASSWORD=<%= Shellwords.escape properties.influxdb.nozzle.db_password %>
	export INFLUXDB_NOZZLE_SUBSCRIPTION_ID=<%= Shellwords.escape properties.influxdb.nozzle.subscription_id %>
	export INFLUXDB_NOZZLE_CLIENT_ID=<%= Shellwords.escape properties.influxdb.nozzle.client_id %>
	export INFLUXDB_NOZZLE_CLIENT_SECRET=<%= Shellwords.escape properties.influxdb.nozzle.client_secret %>
	export INFLUXDB_NOZZLE_FOUNDATION=<%= Shellwords.escape properties.influxdb.nozzle.foundation %>
	export INFLUXDB_NOZZLE_BATCH_SIZE=<%= Shellwords.escape properties.influxdb.nozzle.batch_size %>
	export INFLUXDB_NOZZLE_TAG_FIELDS=<%= Shellwords.escape properties.influxdb.nozzle.tag_fields %>
	export INFLUXDB_NOZZLE_SKIP_SSL_VALIDATION=${CF_SKIP_SSL}
}

function prepare_cf_cli {
	export PATH="/var/vcap/packages/cf_cli/bin:$PATH"
	export CF_HOME=`pwd`/home/cf
	mkdir -p $CF_HOME
}

function authenticate() {
	$CF --version
	if is_true "$CF_SKIP_SSL"; then
		cf api $CF_TARGET --skip-ssl-validation
	else
		cf api $CF_TARGET
	fi
	cf auth $ADMIN_USER $ADMIN_PASSWORD
}

function setup_target_org() {
	if [ -z "$CF_ORG" ]; then
		CF_ORG=ecsteam-influxdb-org
	fi
	if ! $CF org $CF_ORG >/dev/null; then
		cf create-org $CF_ORG
		ignore_failure=`$CF set-quota $CF_ORG runaway`
	fi
	cf target -o $CF_ORG
}

function setup_target_space() {
	if [ -z "$CF_SPACE" ]; then
		CF_SPACE=ecsteam-influxdb-space
	fi
	if ! $CF space $CF_SPACE >/dev/null; then
		cf create-space $CF_SPACE
	fi
	cf target -s $CF_SPACE
}

function add_target_org_to_admin() {

	SYSTEM_ORG_GUID=`$CF org system --guid`
	NEW_ORG_GUID=`$CF org $CF_ORG --guid`

	ADMIN_GUID=`$CF curl /v2/organizations/$SYSTEM_ORG_GUID/users | grep -A 2 "username\": \"admin" | awk '{print $2}' | grep organizations | awk -F '/' '{print $4 }' `

	$CF curl /v2/users/$ADMIN_GUID/organizations/$NEW_ORG_GUID -X PUT >/dev/null
	$CF curl /v2/users/$ADMIN_GUID/managed_organizations/$NEW_ORG_GUID -X PUT >/dev/null
}

function setup_package_path() {
	if [ -z "$PACKAGE_PATH" ]; then
		export PACKAGE_PATH=/var/vcap/packages
	fi
}

function add_env_vars() {
	cf set-env $1 CC_HOST "$CF_TARGET"

	# Custom variables from tile.yml
	cf set-env $1 INFLUXDB_NOZZLE_ADMIN_CLIENT_ID "$INFLUXDB_NOZZLE_ADMIN_CLIENT_ID"
	cf set-env $1 INFLUXDB_NOZZLE_ADMIN_CLIENT_SECRET "$INFLUXDB_NOZZLE_ADMIN_CLIENT_SECRET"
	cf set-env $1 INFLUXDB_NOZZLE_DB_NAME "$INFLUXDB_NOZZLE_DB_NAME"
	cf set-env $1 INFLUXDB_NOZZLE_DB_USER "$INFLUXDB_NOZZLE_DB_USER"
	cf set-env $1 INFLUXDB_NOZZLE_DB_PASSWORD "$INFLUXDB_NOZZLE_DB_PASSWORD"
	cf set-env $1 INFLUXDB_NOZZLE_SUBSCRIPTION_ID "$INFLUXDB_NOZZLE_SUBSCRIPTION_ID"
	cf set-env $1 INFLUXDB_NOZZLE_CLIENT_ID "$INFLUXDB_NOZZLE_CLIENT_ID"
	cf set-env $1 INFLUXDB_NOZZLE_CLIENT_SECRET "$INFLUXDB_NOZZLE_CLIENT_SECRET"
	cf set-env $1 INFLUXDB_NOZZLE_FOUNDATION "$INFLUXDB_NOZZLE_FOUNDATION"
	cf set-env $1 INFLUXDB_NOZZLE_BATCH_SIZE "$INFLUXDB_NOZZLE_BATCH_SIZE"
	cf set-env $1 INFLUXDB_NOZZLE_TAG_FIELDS "$INFLUXDB_NOZZLE_TAG_FIELDS"
	cf set-env $1 INFLUXDB_NOZZLE_SKIP_SSL_VALIDATION "$INFLUXDB_NOZZLE_SKIP_SSL_VALIDATION"
	cf set-env $1 SPRING_PROFILES_ACTIVE tile
}

function delete_older_versions() {
	PKG_NAME="$1"
	APP_NAME="$2"

	$CF delete -f $APP_NAME-venerable || :
	$CF rename $APP_NAME $APP_NAME-venerable || :
	$CF rename $APP_NAME-new $APP_NAME
	$CF stop $APP_NAME-venerable || :
	$CF unmap-route $APP_NAME-venerable $APP_DOMAIN -n $APP_NAME
}

function wait_till_running() {
	for i in `seq 1  6`; do
		CF_TRACE=true $CF app "$1" | grep RUNNING | grep "$1" >/dev/null
		if [ "$?" -ne "0" ]; then
			sleep 10
			echo "cf app $1   # waiting for running state"
		else
			break
		fi
	done
}

function deploy_app() {
	local PKG_NAME="$1"
	local APP_NAME="$2-new"
	local APP_HOST="$3"

	cf push ${APP_NAME} -n ${APP_HOST} -d ${APP_DOMAIN} \
		-i ${INSTANCES} -b ${BUILDPACK} -p $PACKAGE_PATH/${PKG_NAME}/influxdb-nozzle.jar \
		--no-start
	add_env_vars ${APP_NAME}
}

function start_app() {
	local PKG_NAME="$1"
	local APP_NAME="$2"
	echo cf start ${APP_NAME}
	$CF start ${APP_NAME}-new
	result="$?"
	if [ "$result" -ne "0" ]; then
		echo cf logs ${APP_NAME}-new --recent
		$CF logs ${APP_NAME}-new --recent
		exit $result
	fi
	wait_till_running ${APP_NAME}-new
	delete_older_versions ${PKG_NAME} ${APP_NAME}
}

import_opsmgr_variables
prepare_cf_cli
authenticate
setup_target_org
setup_target_space
add_target_org_to_admin
setup_package_path

export PKG_NAME=influxdb_nozzle
export APP_NAME=influxdb-nozzle
export APP_HOST=influxdb-nozzle
deploy_app "$PKG_NAME" "$APP_NAME" "$APP_HOST"
start_app influxdb-nozzle "$APP_NAME"
